{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Tecnolog\u00edas Web En la asignatura de Tecnolog\u00edas Web, exploraremos los principios fundamentales que sustentan la World Wide Web, como el protocolo HTTP, el est\u00e1ndar URL o los documentos HTML y el uso de CSS (Cascading Style Sheets), esenciales para estructurar y estilizar contenido en la web. A trav\u00e9s del modelo cliente-servidor, entenderemos c\u00f3mo se desarrollan aplicaciones distribuidas, base para cualquier proyecto web. Los estudiantes aprender\u00e1n a programar tanto clientes como servidores web, utilizando herramientas como Python y Flask, para gestionar datos y presentar contenido din\u00e1mico. Aprender\u00e1n a integrar bases de datos para el desarrollo de servicios web. Adem\u00e1s, se abordar\u00e1n las tendencias actuales en el desarrollo web, como el uso de APIs REST y microservicios, adapt\u00e1ndose a la creciente demanda de aplicaciones m\u00f3viles.","title":"Tecnolog\u00eda Web"},{"location":"index.html#tecnologias-web","text":"En la asignatura de Tecnolog\u00edas Web, exploraremos los principios fundamentales que sustentan la World Wide Web, como el protocolo HTTP, el est\u00e1ndar URL o los documentos HTML y el uso de CSS (Cascading Style Sheets), esenciales para estructurar y estilizar contenido en la web. A trav\u00e9s del modelo cliente-servidor, entenderemos c\u00f3mo se desarrollan aplicaciones distribuidas, base para cualquier proyecto web. Los estudiantes aprender\u00e1n a programar tanto clientes como servidores web, utilizando herramientas como Python y Flask, para gestionar datos y presentar contenido din\u00e1mico. Aprender\u00e1n a integrar bases de datos para el desarrollo de servicios web. Adem\u00e1s, se abordar\u00e1n las tendencias actuales en el desarrollo web, como el uso de APIs REST y microservicios, adapt\u00e1ndose a la creciente demanda de aplicaciones m\u00f3viles.","title":"Tecnolog\u00edas Web"},{"location":"0-introduccion/client_server.html","text":"Cliente/Servidor Como se ha comentado en la secci\u00f3n anterior el modelo cliente-servidor es la base de las aplicaciones distribuidas en Internet. En este esquema, el cliente es el dispositivo o software que realiza peticiones, mientras que el servidor es el que procesa esas solicitudes y devuelve una respuesta. Un ejemplo claro es cuando accedemos a una p\u00e1gina web: nuestro navegador (cliente) solicita una p\u00e1gina a un servidor web, que procesa la petici\u00f3n y env\u00eda el contenido en forma de HTML, CSS y JavaScript. Este modelo permite la distribuci\u00f3n de tareas, optimizando recursos y facilitando la escalabilidad. La interacci\u00f3n entre un cliente y un servidor se apoya en el modelo OSI (Open Systems Interconnection) para garantizar que los datos se transmitan correctamente a trav\u00e9s de la red. Cada solicitud que hace un cliente sigue las capas del modelo OSI, desde la Capa de Aplicaci\u00f3n , donde protocolos como HTTP, hasta la Capa de Transporte , donde los protocolos como TCP o UDP determinan como se van a enviar los paquetes de datos. Luego, la informaci\u00f3n atraviesa las Capas de Red y Enlace de Datos, que determinan la mejor ruta y garantizan la entrega f\u00edsica de los paquetes. En el servidor, el proceso se invierte: los datos ascienden por las capas de OSI hasta llegar a la aplicaci\u00f3n que generar\u00e1 la respuesta. A lo largo de los a\u00f1os, el cliente-servidor ha evolucionado con tecnolog\u00edas como APIs REST, WebSockets y microservicios, adapt\u00e1ndose a las necesidades de aplicaciones modernas. Cliente En el contexto de Internet, se denomina cliente tanto a los dispositivos que acceden a la red como a los programas que interact\u00faan con los servicios en l\u00ednea. Los dispositivos clientes incluyen PCs, port\u00e1tiles, tabletas, tel\u00e9fonos y relojes inteligentes , entre otros. Estos equipos se conectan a Internet para solicitar y consumir informaci\u00f3n o servicios. Adem\u00e1s, los clientes tambi\u00e9n pueden ser programas espec\u00edficos dise\u00f1ados para interactuar con servidores. El navegador web es el cliente m\u00e1s utilizado para acceder a la Web, con ejemplos populares como Chrome, Firefox, Edge, Opera y Safari . Estos navegadores interpretan contenido desarrollado en HTML, CSS y JavaScript para mostrar p\u00e1ginas interactivas a los usuarios. En la actualidad, las aplicaciones m\u00f3viles han ganado protagonismo como clientes principales. Existen dos tipos principales de aplicaciones en dispositivos m\u00f3viles: Aplicaciones nativas , desarrolladas espec\u00edficamente para cada sistema operativo, como Android (programado en Java/Kotlin ) e iOS (usando Swift ). Aplicaciones basadas en tecnolog\u00edas web , como las Progressive Web Apps (PWAs) o las creadas con React Native , que reutilizan c\u00f3digo web y pueden ejecutarse en m\u00faltiples plataformas, desde ordenadores a m\u00f3viles. Servidor El t\u00e9rmino servidor se refiere tanto a la m\u00e1quina que proporciona servicios en Internet como al software que gestiona estas solicitudes. Un servidor f\u00edsico o virtual es un equipo configurado para responder a las peticiones de los clientes. Puede ser una m\u00e1quina dedicada o una instancia en la nube , y cuenta con una direcci\u00f3n IP o dominio que permite su localizaci\u00f3n en la red. Adem\u00e1s, un servidor es tambi\u00e9n el software encargado de gestionar las peticiones y responder a los clientes. Estos programas se ejecutan en la m\u00e1quina servidora y utilizan puertos espec\u00edficos para la comunicaci\u00f3n, como el puerto 80 (desginado por defecto para el protocolo HTTP) para servidores web.","title":"Cliente/Servidor"},{"location":"0-introduccion/client_server.html#clienteservidor","text":"Como se ha comentado en la secci\u00f3n anterior el modelo cliente-servidor es la base de las aplicaciones distribuidas en Internet. En este esquema, el cliente es el dispositivo o software que realiza peticiones, mientras que el servidor es el que procesa esas solicitudes y devuelve una respuesta. Un ejemplo claro es cuando accedemos a una p\u00e1gina web: nuestro navegador (cliente) solicita una p\u00e1gina a un servidor web, que procesa la petici\u00f3n y env\u00eda el contenido en forma de HTML, CSS y JavaScript. Este modelo permite la distribuci\u00f3n de tareas, optimizando recursos y facilitando la escalabilidad. La interacci\u00f3n entre un cliente y un servidor se apoya en el modelo OSI (Open Systems Interconnection) para garantizar que los datos se transmitan correctamente a trav\u00e9s de la red. Cada solicitud que hace un cliente sigue las capas del modelo OSI, desde la Capa de Aplicaci\u00f3n , donde protocolos como HTTP, hasta la Capa de Transporte , donde los protocolos como TCP o UDP determinan como se van a enviar los paquetes de datos. Luego, la informaci\u00f3n atraviesa las Capas de Red y Enlace de Datos, que determinan la mejor ruta y garantizan la entrega f\u00edsica de los paquetes. En el servidor, el proceso se invierte: los datos ascienden por las capas de OSI hasta llegar a la aplicaci\u00f3n que generar\u00e1 la respuesta. A lo largo de los a\u00f1os, el cliente-servidor ha evolucionado con tecnolog\u00edas como APIs REST, WebSockets y microservicios, adapt\u00e1ndose a las necesidades de aplicaciones modernas.","title":"Cliente/Servidor"},{"location":"0-introduccion/client_server.html#cliente","text":"En el contexto de Internet, se denomina cliente tanto a los dispositivos que acceden a la red como a los programas que interact\u00faan con los servicios en l\u00ednea. Los dispositivos clientes incluyen PCs, port\u00e1tiles, tabletas, tel\u00e9fonos y relojes inteligentes , entre otros. Estos equipos se conectan a Internet para solicitar y consumir informaci\u00f3n o servicios. Adem\u00e1s, los clientes tambi\u00e9n pueden ser programas espec\u00edficos dise\u00f1ados para interactuar con servidores. El navegador web es el cliente m\u00e1s utilizado para acceder a la Web, con ejemplos populares como Chrome, Firefox, Edge, Opera y Safari . Estos navegadores interpretan contenido desarrollado en HTML, CSS y JavaScript para mostrar p\u00e1ginas interactivas a los usuarios. En la actualidad, las aplicaciones m\u00f3viles han ganado protagonismo como clientes principales. Existen dos tipos principales de aplicaciones en dispositivos m\u00f3viles: Aplicaciones nativas , desarrolladas espec\u00edficamente para cada sistema operativo, como Android (programado en Java/Kotlin ) e iOS (usando Swift ). Aplicaciones basadas en tecnolog\u00edas web , como las Progressive Web Apps (PWAs) o las creadas con React Native , que reutilizan c\u00f3digo web y pueden ejecutarse en m\u00faltiples plataformas, desde ordenadores a m\u00f3viles.","title":"Cliente"},{"location":"0-introduccion/client_server.html#servidor","text":"El t\u00e9rmino servidor se refiere tanto a la m\u00e1quina que proporciona servicios en Internet como al software que gestiona estas solicitudes. Un servidor f\u00edsico o virtual es un equipo configurado para responder a las peticiones de los clientes. Puede ser una m\u00e1quina dedicada o una instancia en la nube , y cuenta con una direcci\u00f3n IP o dominio que permite su localizaci\u00f3n en la red. Adem\u00e1s, un servidor es tambi\u00e9n el software encargado de gestionar las peticiones y responder a los clientes. Estos programas se ejecutan en la m\u00e1quina servidora y utilizan puertos espec\u00edficos para la comunicaci\u00f3n, como el puerto 80 (desginado por defecto para el protocolo HTTP) para servidores web.","title":"Servidor"},{"location":"0-introduccion/desarrollo_web.html","text":"Arquitecturas de aplicaciones Web Como se ha comentado anteriormente, generalmente las comunicaciones se establece siguiendo el modelo cliente/servidor. La implementaci\u00f3n de dicho modelo se puede hacer de diferentes formas en funci\u00f3n de las necesidades de escalabilidad, rendimiento y mantenimiento de cada contexto. Un esquema muy sencillo ser\u00eda aquel en la que el servidor web ofrece ficheros estaticos que son descargados por el cliente. Los ficheros estaticos podr\u00edan ser ficheros HTML, im\u00e1genes, audios, videos, etc. Pero existen otros esquemas m\u00e1s avanzados: Arquitectura con balanceador de carga . Utiliza un balanceador de carga para distribuir las solicitudes entre m\u00faltiples servidores. Permiten mejorar el rendimiento y evita sobrecargas en un \u00fanico servidor, pero se debe tener cuidado con la sincronizaci\u00f3n de los datos. Es clave para garantizar alta disponibilidad y tolerancia a fallos . Arquitectura basada en microservicios . En este caso, la aplicaci\u00f3n se divide en peque\u00f1os servicios independientes que se comunican mediante APIs. Cada microservicio tiene su propia l\u00f3gica de negocio y base de datos. Por ejemplo, una aplicaci\u00f3n de compras podr\u00eda tener microservicios como el sistema de autenticaci\u00f3n, la pasarela de pago, cat\u00e1logo de productos, etc. Este tipo de arquitecturas permite escalar aquellos microservicios que puedan suponer un cuello de botella y de esta forma hacer un uso m\u00e1s eficiente de los recursos. Adem\u00e1s, facilita despliegues m\u00e1s flexibles y la actualizaci\u00f3n independiente de componentes. Arquitectura peer-to-peer (P2P) . No depende de servidores centrales; cada nodo act\u00faa como cliente y servidor al mismo tiempo, lo que permite favorecer la descentralizaci\u00f3n y la resistencia a fallos . Es com\u00fan en aplicaciones como redes de intercambio (Torrent) de archivos o criptomonedas. Arquitectura con cach\u00e9 . Se puede utilizar cach\u00e9 en diferentes niveles para mejorar el rendimiento y reducir la carga en los servidores. Estos elementos permiten agilizar la obtenci\u00f3n del recurso. Hay varios tipos de cach\u00e9: Cach\u00e9 en el cliente : Almacena datos en el navegador o aplicaci\u00f3n para reducir solicitudes repetitivas. Cach\u00e9 en el servidor : Guarda respuestas generadas para acelerar futuras peticiones. Cach\u00e9 en la base de datos : Usa sistemas como Redis o Memcached para evitar consultas repetitivas. Un modelo cl\u00e1sico es la arquitectura en tres capas (Three-Tier Architecture), que divide la aplicaci\u00f3n en una capa de presentaci\u00f3n (frontend), una capa de l\u00f3gica de negocio (backend) y una capa de datos (base de datos), facilitando la modularidad y el mantenimiento. Arquitectura en 3 capas Uno de los modelos m\u00e1s cl\u00e1sico es la arquitectura en tres capas (Three-Tier Architecture), que divide la aplicaci\u00f3n en: Capa de presentaci\u00f3n (frontend) : Capa de visualizaci\u00f3n y presentaci\u00f3n con la interfaz del servicio. Se encuentra en el lado del cliente. Capa de l\u00f3gica (backend) : Capa l\u00f3gica con las reglas de orquestaci\u00f3n de la respuesta a las peticiones. Se encuentra en el lado del servidor. Capa de datos (base de datos) : Capa de persistencia que almacena los datos en una base de datos. Se suele encontrar en el lado del servidor. Los distintos elementos se comunican entre si usando distintos protocolos como HTTP, WebSockets, RTSP, WebRTC, etc. Como se ver\u00e1 m\u00e1s tarde, esta arquitectura guarda un paralelismo con un patr\u00f3n para el desarrollo de aplicaciones llamado MVC . Desarrollo web Para desarrollar servidores web, se pueden utilizar diferentes entornos, frameworks, librer\u00edas y lenguajes de programaci\u00f3n. Cada aplicaci\u00f3n web puede ser construida con tecnolog\u00edas variadas, como Python con Flask o Django, Node.js con Express, Ruby on Rails, o incluso lenguajes como Java o PHP. La flexibilidad de elegir entre estos entornos permite a los desarrolladores adaptar la tecnolog\u00eda a las necesidades espec\u00edficas de la aplicaci\u00f3n. En Internet, cada aplicaci\u00f3n usa su propio entorno, y es aqu\u00ed donde los protocolos y est\u00e1ndares juegan un papel crucial. Protocolos como HTTP permiten que aplicaciones construidas con diferentes tecnolog\u00edas puedan comunicarse entre s\u00ed. Estos protocolos proporcionan un marco com\u00fan que facilita la interoperabilidad y asegura que los datos sean intercambiados correctamente entre clientes y servidores, independientemente del entorno que tengan. La siguiente imagen recoge algunos de las decenas de entornos que permiten el desarrollo y despliegue de servicios web. A trav\u00e9s de estos frameworks, se pueden abordar las capas de presentaci\u00f3n y l\u00f3gica de la arquitectura de 3 capas. Para la capa de datos, existen multitud de bases de datos, tanto SQL como NoSQL. Los frameworks o lenguajes de programaci\u00f3n antes descritos poseen de librer\u00edas que permiten establecer conexiones con las distintas bases de datos. Y al igual que ocurre entre cliente y servidor, existe una serie de protocolos espec\u00edficos de cada base de datos que permiten su conexi\u00f3n. Para finalizar, comentar que para desarrollar aplicaciones web, existen diversos Entornos de Desarrollo Integrados (IDE) y herramientas de desarrollo que facilitan la escritura, depuraci\u00f3n y optimizaci\u00f3n del c\u00f3digo. A continuaci\u00f3n, se mencionan algunos de los m\u00e1s utilizados: Visual Studio Code (gratuito): Es uno de los editores m\u00e1s populares debido a su ligereza, extensibilidad y soporte para una gran cantidad de lenguajes y tecnolog\u00edas. Puedes obtenerlo de manera gratuita en su p\u00e1gina oficial: Visual Studio Code . WebStorm (pago, con licencia gratuita para educaci\u00f3n): Este IDE est\u00e1 dise\u00f1ado especialmente para el desarrollo web y soporta tecnolog\u00edas como JavaScript, TypeScript, y frameworks como Angular y React. Developer Tools (Herramientas para desarrolladores de navegadores como Chrome, Firefox, Safari, Edge, etc.): Estas herramientas permiten depurar y analizar las aplicaciones web directamente desde el navegador. Entre las funciones m\u00e1s \u00fatiles se encuentran: Visor de c\u00f3digo fuente : Permite visualizar y explorar el c\u00f3digo HTML, CSS y JavaScript de una p\u00e1gina web. Consola JavaScript : Ideal para ejecutar scripts y depurar errores en tiempo real. Analizador de elementos HTML y CSS : Muestra c\u00f3mo est\u00e1n estructurados los elementos HTML y permite realizar ajustes de CSS de forma visual y directa. Estas herramientas son esenciales para el desarrollo web, ya que facilitan la depuraci\u00f3n, optimizaci\u00f3n y adaptaci\u00f3n de las aplicaciones a distintos entornos y plataformas.","title":"Desarrollo Web"},{"location":"0-introduccion/desarrollo_web.html#arquitecturas-de-aplicaciones-web","text":"Como se ha comentado anteriormente, generalmente las comunicaciones se establece siguiendo el modelo cliente/servidor. La implementaci\u00f3n de dicho modelo se puede hacer de diferentes formas en funci\u00f3n de las necesidades de escalabilidad, rendimiento y mantenimiento de cada contexto. Un esquema muy sencillo ser\u00eda aquel en la que el servidor web ofrece ficheros estaticos que son descargados por el cliente. Los ficheros estaticos podr\u00edan ser ficheros HTML, im\u00e1genes, audios, videos, etc. Pero existen otros esquemas m\u00e1s avanzados: Arquitectura con balanceador de carga . Utiliza un balanceador de carga para distribuir las solicitudes entre m\u00faltiples servidores. Permiten mejorar el rendimiento y evita sobrecargas en un \u00fanico servidor, pero se debe tener cuidado con la sincronizaci\u00f3n de los datos. Es clave para garantizar alta disponibilidad y tolerancia a fallos . Arquitectura basada en microservicios . En este caso, la aplicaci\u00f3n se divide en peque\u00f1os servicios independientes que se comunican mediante APIs. Cada microservicio tiene su propia l\u00f3gica de negocio y base de datos. Por ejemplo, una aplicaci\u00f3n de compras podr\u00eda tener microservicios como el sistema de autenticaci\u00f3n, la pasarela de pago, cat\u00e1logo de productos, etc. Este tipo de arquitecturas permite escalar aquellos microservicios que puedan suponer un cuello de botella y de esta forma hacer un uso m\u00e1s eficiente de los recursos. Adem\u00e1s, facilita despliegues m\u00e1s flexibles y la actualizaci\u00f3n independiente de componentes. Arquitectura peer-to-peer (P2P) . No depende de servidores centrales; cada nodo act\u00faa como cliente y servidor al mismo tiempo, lo que permite favorecer la descentralizaci\u00f3n y la resistencia a fallos . Es com\u00fan en aplicaciones como redes de intercambio (Torrent) de archivos o criptomonedas. Arquitectura con cach\u00e9 . Se puede utilizar cach\u00e9 en diferentes niveles para mejorar el rendimiento y reducir la carga en los servidores. Estos elementos permiten agilizar la obtenci\u00f3n del recurso. Hay varios tipos de cach\u00e9: Cach\u00e9 en el cliente : Almacena datos en el navegador o aplicaci\u00f3n para reducir solicitudes repetitivas. Cach\u00e9 en el servidor : Guarda respuestas generadas para acelerar futuras peticiones. Cach\u00e9 en la base de datos : Usa sistemas como Redis o Memcached para evitar consultas repetitivas. Un modelo cl\u00e1sico es la arquitectura en tres capas (Three-Tier Architecture), que divide la aplicaci\u00f3n en una capa de presentaci\u00f3n (frontend), una capa de l\u00f3gica de negocio (backend) y una capa de datos (base de datos), facilitando la modularidad y el mantenimiento.","title":"Arquitecturas de aplicaciones Web"},{"location":"0-introduccion/desarrollo_web.html#arquitectura-en-3-capas","text":"Uno de los modelos m\u00e1s cl\u00e1sico es la arquitectura en tres capas (Three-Tier Architecture), que divide la aplicaci\u00f3n en: Capa de presentaci\u00f3n (frontend) : Capa de visualizaci\u00f3n y presentaci\u00f3n con la interfaz del servicio. Se encuentra en el lado del cliente. Capa de l\u00f3gica (backend) : Capa l\u00f3gica con las reglas de orquestaci\u00f3n de la respuesta a las peticiones. Se encuentra en el lado del servidor. Capa de datos (base de datos) : Capa de persistencia que almacena los datos en una base de datos. Se suele encontrar en el lado del servidor. Los distintos elementos se comunican entre si usando distintos protocolos como HTTP, WebSockets, RTSP, WebRTC, etc. Como se ver\u00e1 m\u00e1s tarde, esta arquitectura guarda un paralelismo con un patr\u00f3n para el desarrollo de aplicaciones llamado MVC .","title":"Arquitectura en 3 capas"},{"location":"0-introduccion/desarrollo_web.html#desarrollo-web","text":"Para desarrollar servidores web, se pueden utilizar diferentes entornos, frameworks, librer\u00edas y lenguajes de programaci\u00f3n. Cada aplicaci\u00f3n web puede ser construida con tecnolog\u00edas variadas, como Python con Flask o Django, Node.js con Express, Ruby on Rails, o incluso lenguajes como Java o PHP. La flexibilidad de elegir entre estos entornos permite a los desarrolladores adaptar la tecnolog\u00eda a las necesidades espec\u00edficas de la aplicaci\u00f3n. En Internet, cada aplicaci\u00f3n usa su propio entorno, y es aqu\u00ed donde los protocolos y est\u00e1ndares juegan un papel crucial. Protocolos como HTTP permiten que aplicaciones construidas con diferentes tecnolog\u00edas puedan comunicarse entre s\u00ed. Estos protocolos proporcionan un marco com\u00fan que facilita la interoperabilidad y asegura que los datos sean intercambiados correctamente entre clientes y servidores, independientemente del entorno que tengan. La siguiente imagen recoge algunos de las decenas de entornos que permiten el desarrollo y despliegue de servicios web. A trav\u00e9s de estos frameworks, se pueden abordar las capas de presentaci\u00f3n y l\u00f3gica de la arquitectura de 3 capas. Para la capa de datos, existen multitud de bases de datos, tanto SQL como NoSQL. Los frameworks o lenguajes de programaci\u00f3n antes descritos poseen de librer\u00edas que permiten establecer conexiones con las distintas bases de datos. Y al igual que ocurre entre cliente y servidor, existe una serie de protocolos espec\u00edficos de cada base de datos que permiten su conexi\u00f3n. Para finalizar, comentar que para desarrollar aplicaciones web, existen diversos Entornos de Desarrollo Integrados (IDE) y herramientas de desarrollo que facilitan la escritura, depuraci\u00f3n y optimizaci\u00f3n del c\u00f3digo. A continuaci\u00f3n, se mencionan algunos de los m\u00e1s utilizados: Visual Studio Code (gratuito): Es uno de los editores m\u00e1s populares debido a su ligereza, extensibilidad y soporte para una gran cantidad de lenguajes y tecnolog\u00edas. Puedes obtenerlo de manera gratuita en su p\u00e1gina oficial: Visual Studio Code . WebStorm (pago, con licencia gratuita para educaci\u00f3n): Este IDE est\u00e1 dise\u00f1ado especialmente para el desarrollo web y soporta tecnolog\u00edas como JavaScript, TypeScript, y frameworks como Angular y React. Developer Tools (Herramientas para desarrolladores de navegadores como Chrome, Firefox, Safari, Edge, etc.): Estas herramientas permiten depurar y analizar las aplicaciones web directamente desde el navegador. Entre las funciones m\u00e1s \u00fatiles se encuentran: Visor de c\u00f3digo fuente : Permite visualizar y explorar el c\u00f3digo HTML, CSS y JavaScript de una p\u00e1gina web. Consola JavaScript : Ideal para ejecutar scripts y depurar errores en tiempo real. Analizador de elementos HTML y CSS : Muestra c\u00f3mo est\u00e1n estructurados los elementos HTML y permite realizar ajustes de CSS de forma visual y directa. Estas herramientas son esenciales para el desarrollo web, ya que facilitan la depuraci\u00f3n, optimizaci\u00f3n y adaptaci\u00f3n de las aplicaciones a distintos entornos y plataformas.","title":"Desarrollo web"},{"location":"0-introduccion/evolucion.html","text":"Historia de Internet La evoluci\u00f3n de Internet ha cambiado por completo la manera en que nos relacionamos, trabajamos y compartimos informaci\u00f3n. Lo que comenz\u00f3 como una simple red para investigadores, hoy conecta a miles de millones de personas y dispositivos alrededor del mundo. En este proceso, es clave el desarrollo de los servidores web, los cuales han permitido crear multitud de aplicaciones como redes sociales, periodicos o la banca online. En esta secci\u00f3n vamos a ver c\u00f3mo ha sido ese proceso y c\u00f3mo estos cambios han dado forma al Internet que usamos todos los d\u00edas. Or\u00edgenes Internet tiene sus ra\u00edces en Arpanet, una red de investigaci\u00f3n que se estableci\u00f3 en enero de 1983. Desde sus inicios, la idea era conectar ordenadores utilizando el protocolo TCP/IP, un sistema de comunicaciones que ha permitido la creaci\u00f3n de una red global. TCP/IP es fundamental porque soporta aplicaciones cliente-servidor, que se comunican a trav\u00e9s de una interfaz de sockets. El modelo cliente-servidor es la base de las aplicaciones distribuidas en Internet. Este modelo divide las tareas entre dos partes: los servidores , que proveen recursos o servicios, y los clientes , que solicitan y consumen estos recursos. Las primeras aplicaciones sobre Internet fueron herramientas sencillas como telnet (una terminal virtual para acceder a otros sistemas), FTP (para la transferencia de archivos) y el correo electr\u00f3nico . En 1989, Tim Berners-Lee propuso una nueva idea: la World Wide Web (WWW) , un espacio interconectado de informaci\u00f3n basado en documentos hipertexto. Estos documentos poseen un identificador \u00fanico y est\u00e1n conectados entre s\u00ed mediante hiperenlaces . Los usuarios pueden acceder a estos documentos a trav\u00e9s de navegadores web, mientras que los servidores web est\u00e1n encargados de servir esos contenidos est\u00e1ticos. Para ello, Berners-Lee desarroll\u00f3 las tres tecnolog\u00edas esenciales para la Web: URL : Para identificar recursos de manera un\u00edvoca. HTML : Un lenguaje de marcado que estructura y presenta documentos en la Web. HTTP : El protocolo que permite la transferencia de informaci\u00f3n entre el cliente y el servidor. Desde la creaci\u00f3n de la Web, la tecnolog\u00eda ha evolucionado de manera constante. Por ejemplo, el protocolo HTTP ha ido mejorando con versiones como HTTP/1.1, HTTPS (que agrega seguridad mediante SSL) y HTTP/2 . Adem\u00e1s, JavaScript ha experimentado grandes cambios desde sus primeras versiones, con el nacimiento de ES6 y ES7 . A su vez, la estructura de los documentos ha pasado de HTML y CSS b\u00e1sicos a las potentes versiones HTML5 y CSS3 , que permiten una interacci\u00f3n m\u00e1s rica y moderna. Tambi\u00e9n han surgido nuevos est\u00e1ndares en los navegadores, como el soporte para pesta\u00f1as y extensiones, mientras que los servidores web han evolucionado hacia modelos m\u00e1s din\u00e1micos, capaces de interactuar con bases de datos y ofrecer contenidos personalizados. Evoluci\u00f3n p\u00e1ginas web D\u00e9cada de 1990: En los primeros a\u00f1os de la Web, JavaScript apenas exist\u00eda y la l\u00f3gica de las aplicaciones web resid\u00eda casi completamente en el lado del servidor. En este periodo, las p\u00e1ginas web eran principalmente est\u00e1ticas y se serv\u00edan usando el m\u00e9todo HTTP GET , mientras que los formularios se enviaban con HTTP POST . Cada vez que un usuario interactuaba con una p\u00e1gina, la p\u00e1gina completa se recargaba, lo que hac\u00eda que la experiencia fuera bastante lenta y poco eficiente. D\u00e9cada de 2000: A medida que Internet maduraba, surgieron nuevas tecnolog\u00edas como AJAX (Asynchronous JavaScript and XML), que permiti\u00f3 la comunicaci\u00f3n as\u00edncrona entre el cliente y el servidor a trav\u00e9s de XMLHttpRequest . Esto hizo posible actualizar partes de una p\u00e1gina web sin necesidad de recargarla completamente, mejorando as\u00ed la experiencia de usuario. Sin embargo, en este periodo, la mayor parte de la l\u00f3gica de las aplicaciones segu\u00eda residiendo en el servidor. D\u00e9cada de 2010 y m\u00e1s all\u00e1: Con el paso del tiempo, las aplicaciones web evolucionaron hacia lo que hoy conocemos como SPA (Single Page Application), un tipo de arquitectura en la que la mayor\u00eda de la l\u00f3gica de la aplicaci\u00f3n se ejecuta en el cliente . Esto permite una experiencia m\u00e1s fluida y r\u00e1pida, ya que la mayor\u00eda de la interacci\u00f3n ocurre sin tener que recargar la p\u00e1gina. El servidor se limita a almacenar datos y proporcionar APIs para la comunicaci\u00f3n. El uso de tecnolog\u00edas como AJAX , Websockets , RTSP y WebRTC ha permitido una comunicaci\u00f3n en tiempo real, transformando la Web en una plataforma capaz de soportar aplicaciones m\u00e1s interactivas, como videollamadas, chats en vivo y juegos en l\u00ednea. Adem\u00e1s, el auge de frameworks JavaScript como React , Vue.js y Angular ha facilitado la creaci\u00f3n de aplicaciones web modernas y escalables. En resumen, Internet y las tecnolog\u00edas web han recorrido un largo camino desde sus inicios, con mejoras constantes que han permitido una mayor interactividad, velocidad y personalizaci\u00f3n en la experiencia de usuario.","title":"Evoluci\u00f3n de la web"},{"location":"0-introduccion/evolucion.html#historia-de-internet","text":"La evoluci\u00f3n de Internet ha cambiado por completo la manera en que nos relacionamos, trabajamos y compartimos informaci\u00f3n. Lo que comenz\u00f3 como una simple red para investigadores, hoy conecta a miles de millones de personas y dispositivos alrededor del mundo. En este proceso, es clave el desarrollo de los servidores web, los cuales han permitido crear multitud de aplicaciones como redes sociales, periodicos o la banca online. En esta secci\u00f3n vamos a ver c\u00f3mo ha sido ese proceso y c\u00f3mo estos cambios han dado forma al Internet que usamos todos los d\u00edas.","title":"Historia de Internet"},{"location":"0-introduccion/evolucion.html#origenes","text":"Internet tiene sus ra\u00edces en Arpanet, una red de investigaci\u00f3n que se estableci\u00f3 en enero de 1983. Desde sus inicios, la idea era conectar ordenadores utilizando el protocolo TCP/IP, un sistema de comunicaciones que ha permitido la creaci\u00f3n de una red global. TCP/IP es fundamental porque soporta aplicaciones cliente-servidor, que se comunican a trav\u00e9s de una interfaz de sockets. El modelo cliente-servidor es la base de las aplicaciones distribuidas en Internet. Este modelo divide las tareas entre dos partes: los servidores , que proveen recursos o servicios, y los clientes , que solicitan y consumen estos recursos. Las primeras aplicaciones sobre Internet fueron herramientas sencillas como telnet (una terminal virtual para acceder a otros sistemas), FTP (para la transferencia de archivos) y el correo electr\u00f3nico . En 1989, Tim Berners-Lee propuso una nueva idea: la World Wide Web (WWW) , un espacio interconectado de informaci\u00f3n basado en documentos hipertexto. Estos documentos poseen un identificador \u00fanico y est\u00e1n conectados entre s\u00ed mediante hiperenlaces . Los usuarios pueden acceder a estos documentos a trav\u00e9s de navegadores web, mientras que los servidores web est\u00e1n encargados de servir esos contenidos est\u00e1ticos. Para ello, Berners-Lee desarroll\u00f3 las tres tecnolog\u00edas esenciales para la Web: URL : Para identificar recursos de manera un\u00edvoca. HTML : Un lenguaje de marcado que estructura y presenta documentos en la Web. HTTP : El protocolo que permite la transferencia de informaci\u00f3n entre el cliente y el servidor. Desde la creaci\u00f3n de la Web, la tecnolog\u00eda ha evolucionado de manera constante. Por ejemplo, el protocolo HTTP ha ido mejorando con versiones como HTTP/1.1, HTTPS (que agrega seguridad mediante SSL) y HTTP/2 . Adem\u00e1s, JavaScript ha experimentado grandes cambios desde sus primeras versiones, con el nacimiento de ES6 y ES7 . A su vez, la estructura de los documentos ha pasado de HTML y CSS b\u00e1sicos a las potentes versiones HTML5 y CSS3 , que permiten una interacci\u00f3n m\u00e1s rica y moderna. Tambi\u00e9n han surgido nuevos est\u00e1ndares en los navegadores, como el soporte para pesta\u00f1as y extensiones, mientras que los servidores web han evolucionado hacia modelos m\u00e1s din\u00e1micos, capaces de interactuar con bases de datos y ofrecer contenidos personalizados.","title":"Or\u00edgenes"},{"location":"0-introduccion/evolucion.html#evolucion-paginas-web","text":"","title":"Evoluci\u00f3n p\u00e1ginas web"},{"location":"0-introduccion/evolucion.html#decada-de-1990","text":"En los primeros a\u00f1os de la Web, JavaScript apenas exist\u00eda y la l\u00f3gica de las aplicaciones web resid\u00eda casi completamente en el lado del servidor. En este periodo, las p\u00e1ginas web eran principalmente est\u00e1ticas y se serv\u00edan usando el m\u00e9todo HTTP GET , mientras que los formularios se enviaban con HTTP POST . Cada vez que un usuario interactuaba con una p\u00e1gina, la p\u00e1gina completa se recargaba, lo que hac\u00eda que la experiencia fuera bastante lenta y poco eficiente.","title":"D\u00e9cada de 1990:"},{"location":"0-introduccion/evolucion.html#decada-de-2000","text":"A medida que Internet maduraba, surgieron nuevas tecnolog\u00edas como AJAX (Asynchronous JavaScript and XML), que permiti\u00f3 la comunicaci\u00f3n as\u00edncrona entre el cliente y el servidor a trav\u00e9s de XMLHttpRequest . Esto hizo posible actualizar partes de una p\u00e1gina web sin necesidad de recargarla completamente, mejorando as\u00ed la experiencia de usuario. Sin embargo, en este periodo, la mayor parte de la l\u00f3gica de las aplicaciones segu\u00eda residiendo en el servidor.","title":"D\u00e9cada de 2000:"},{"location":"0-introduccion/evolucion.html#decada-de-2010-y-mas-alla","text":"Con el paso del tiempo, las aplicaciones web evolucionaron hacia lo que hoy conocemos como SPA (Single Page Application), un tipo de arquitectura en la que la mayor\u00eda de la l\u00f3gica de la aplicaci\u00f3n se ejecuta en el cliente . Esto permite una experiencia m\u00e1s fluida y r\u00e1pida, ya que la mayor\u00eda de la interacci\u00f3n ocurre sin tener que recargar la p\u00e1gina. El servidor se limita a almacenar datos y proporcionar APIs para la comunicaci\u00f3n. El uso de tecnolog\u00edas como AJAX , Websockets , RTSP y WebRTC ha permitido una comunicaci\u00f3n en tiempo real, transformando la Web en una plataforma capaz de soportar aplicaciones m\u00e1s interactivas, como videollamadas, chats en vivo y juegos en l\u00ednea. Adem\u00e1s, el auge de frameworks JavaScript como React , Vue.js y Angular ha facilitado la creaci\u00f3n de aplicaciones web modernas y escalables. En resumen, Internet y las tecnolog\u00edas web han recorrido un largo camino desde sus inicios, con mejoras constantes que han permitido una mayor interactividad, velocidad y personalizaci\u00f3n en la experiencia de usuario.","title":"D\u00e9cada de 2010 y m\u00e1s all\u00e1:"},{"location":"0-introduccion/introduccion.html","text":"Introducci\u00f3n La evoluci\u00f3n de Internet ha cambiado por completo la manera en que nos relacionamos, trabajamos y compartimos informaci\u00f3n. Lo que comenz\u00f3 como una simple red para investigadores, hoy conecta a miles de millones de personas y dispositivos alrededor del mundo. En este proceso, es clave el desarrollo de los servidores web, los cuales han permitido crear multitud de aplicaciones como redes sociales, periodicos o la banca online. En esta secci\u00f3n vamos a ver c\u00f3mo ha sido ese proceso y c\u00f3mo estos cambios han dado forma al Internet que usamos todos los d\u00edas.","title":"Introducci\u00f3n"},{"location":"0-introduccion/introduccion.html#introduccion","text":"La evoluci\u00f3n de Internet ha cambiado por completo la manera en que nos relacionamos, trabajamos y compartimos informaci\u00f3n. Lo que comenz\u00f3 como una simple red para investigadores, hoy conecta a miles de millones de personas y dispositivos alrededor del mundo. En este proceso, es clave el desarrollo de los servidores web, los cuales han permitido crear multitud de aplicaciones como redes sociales, periodicos o la banca online. En esta secci\u00f3n vamos a ver c\u00f3mo ha sido ese proceso y c\u00f3mo estos cambios han dado forma al Internet que usamos todos los d\u00edas.","title":"Introducci\u00f3n"},{"location":"1-html-css/css.html","text":"CSS","title":"CSS"},{"location":"1-html-css/css.html#css","text":"","title":"CSS"},{"location":"1-html-css/html.html","text":"HTML","title":"HTML"},{"location":"1-html-css/html.html#html","text":"","title":"HTML"},{"location":"1-html-css/introduccion.html","text":"Introducci\u00f3n","title":"Introducci\u00f3n"},{"location":"1-html-css/introduccion.html#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"2-rutas/http.html","text":"HTTP","title":"HTTP"},{"location":"2-rutas/http.html#http","text":"","title":"HTTP"},{"location":"2-rutas/introduccion.html","text":"Introducci\u00f3n","title":"Introducci\u00f3n"},{"location":"2-rutas/introduccion.html#introduccion","text":"","title":"Introducci\u00f3n"},{"location":"2-rutas/mvc.html","text":"MVC","title":"MVC"},{"location":"2-rutas/mvc.html#mvc","text":"","title":"MVC"},{"location":"2-rutas/url.html","text":"URL","title":"URL"},{"location":"2-rutas/url.html#url","text":"","title":"URL"},{"location":"3-estaticos/introduccion.html","text":"","title":"Introduccion"}]}